{"ast":null,"code":"import { base64Encode } from \"../../internal/common/Base64\";\nimport Method from \"../../internal/net/Method\";\nimport { StitchAuthDocRequest } from \"../../internal/net/StitchAuthDocRequest\";\nimport { StitchAuthRequest } from \"../../internal/net/StitchAuthRequest\";\n\nvar CoreStitchServiceClientImpl = function () {\n  function CoreStitchServiceClientImpl(requestClient, routes, name) {\n    this.requestClient = requestClient;\n    this.serviceRoutes = routes;\n    this.serviceName = name;\n  }\n\n  CoreStitchServiceClientImpl.prototype.callFunction = function (name, args, decoder) {\n    return this.requestClient.doAuthenticatedRequestWithDecoder(this.getCallServiceFunctionRequest(name, args), decoder);\n  };\n\n  CoreStitchServiceClientImpl.prototype.streamFunction = function (name, args, decoder) {\n    return this.requestClient.openAuthenticatedStreamWithDecoder(this.getStreamServiceFunctionRequest(name, args), decoder);\n  };\n\n  CoreStitchServiceClientImpl.prototype.getStreamServiceFunctionRequest = function (name, args) {\n    var body = {\n      name: name\n    };\n\n    if (this.serviceName !== undefined) {\n      body[\"service\"] = this.serviceName;\n    }\n\n    body[\"arguments\"] = args;\n    var reqBuilder = new StitchAuthRequest.Builder();\n    reqBuilder.withMethod(Method.GET).withPath(this.serviceRoutes.functionCallRoute + (\"?stitch_request=\" + encodeURIComponent(base64Encode(JSON.stringify(body)))));\n    return reqBuilder.build();\n  };\n\n  CoreStitchServiceClientImpl.prototype.getCallServiceFunctionRequest = function (name, args) {\n    var body = {\n      name: name\n    };\n\n    if (this.serviceName !== undefined) {\n      body[\"service\"] = this.serviceName;\n    }\n\n    body[\"arguments\"] = args;\n    var reqBuilder = new StitchAuthDocRequest.Builder();\n    reqBuilder.withMethod(Method.POST).withPath(this.serviceRoutes.functionCallRoute);\n    reqBuilder.withDocument(body);\n    return reqBuilder.build();\n  };\n\n  return CoreStitchServiceClientImpl;\n}();\n\nexport default CoreStitchServiceClientImpl;","map":{"version":3,"sources":["../../../../src/services/internal/CoreStitchServiceClientImpl.ts"],"names":[],"mappings":"AAoBA,SAAS,YAAT,QAA6B,8BAA7B;AACA,OAAO,MAAP,MAAmB,2BAAnB;AACA,SAAS,oBAAT,QAAqC,yCAArC;AACA,SAAS,iBAAT,QAAkC,sCAAlC;;AAIA,IAAA,2BAAA,GAAA,YAAA;AAME,WAAA,2BAAA,CACE,aADF,EAEE,MAFF,EAGE,IAHF,EAGe;AAEb,SAAK,aAAL,GAAqB,aAArB;AACA,SAAK,aAAL,GAAqB,MAArB;AACA,SAAK,WAAL,GAAmB,IAAnB;AACD;;AAEM,EAAA,2BAAA,CAAA,SAAA,CAAA,YAAA,GAAP,UACE,IADF,EAEE,IAFF,EAGE,OAHF,EAGsB;AAEpB,WAAO,KAAK,aAAL,CAAmB,iCAAnB,CACL,KAAK,6BAAL,CAAmC,IAAnC,EAAyC,IAAzC,CADK,EAEL,OAFK,CAAP;AAID,GATM;;AAWA,EAAA,2BAAA,CAAA,SAAA,CAAA,cAAA,GAAP,UACE,IADF,EAEE,IAFF,EAGE,OAHF,EAGsB;AAEpB,WAAO,KAAK,aAAL,CAAmB,kCAAnB,CACL,KAAK,+BAAL,CAAqC,IAArC,EAA2C,IAA3C,CADK,EAEL,OAFK,CAAP;AAID,GATM;;AAWC,EAAA,2BAAA,CAAA,SAAA,CAAA,+BAAA,GAAR,UACE,IADF,EAEE,IAFF,EAEa;AAEX,QAAM,IAAI,GAAG;AAAE,MAAA,IAAI,EAAA;AAAN,KAAb;;AACA,QAAI,KAAK,WAAL,KAAqB,SAAzB,EAAoC;AAClC,MAAA,IAAI,CAAC,SAAD,CAAJ,GAAkB,KAAK,WAAvB;AACD;;AACD,IAAA,IAAI,CAAC,WAAD,CAAJ,GAAoB,IAApB;AAEA,QAAM,UAAU,GAAG,IAAI,iBAAiB,CAAC,OAAtB,EAAnB;AACA,IAAA,UAAU,CACP,UADH,CACc,MAAM,CAAC,GADrB,EAEG,QAFH,CAEY,KAAK,aAAL,CAAmB,iBAAnB,IACR,qBAAmB,kBAAkB,CAAC,YAAY,CAAC,IAAI,CAAC,SAAL,CAAe,IAAf,CAAD,CAAb,CAD7B,CAFZ;AAIA,WAAO,UAAU,CAAC,KAAX,EAAP;AACD,GAhBO;;AAkBA,EAAA,2BAAA,CAAA,SAAA,CAAA,6BAAA,GAAR,UACE,IADF,EAEE,IAFF,EAEa;AAEX,QAAM,IAAI,GAAG;AAAE,MAAA,IAAI,EAAA;AAAN,KAAb;;AACA,QAAI,KAAK,WAAL,KAAqB,SAAzB,EAAoC;AAClC,MAAA,IAAI,CAAC,SAAD,CAAJ,GAAkB,KAAK,WAAvB;AACD;;AACD,IAAA,IAAI,CAAC,WAAD,CAAJ,GAAoB,IAApB;AAEA,QAAM,UAAU,GAAG,IAAI,oBAAoB,CAAC,OAAzB,EAAnB;AACA,IAAA,UAAU,CACP,UADH,CACc,MAAM,CAAC,IADrB,EAEG,QAFH,CAEY,KAAK,aAAL,CAAmB,iBAF/B;AAGA,IAAA,UAAU,CAAC,YAAX,CAAwB,IAAxB;AACA,WAAO,UAAU,CAAC,KAAX,EAAP;AACD,GAhBO;;AAiBV,SAAA,2BAAA;AAAC,CAzED,EAAA","sourceRoot":"","sourcesContent":["import { base64Encode } from \"../../internal/common/Base64\";\nimport Method from \"../../internal/net/Method\";\nimport { StitchAuthDocRequest } from \"../../internal/net/StitchAuthDocRequest\";\nimport { StitchAuthRequest } from \"../../internal/net/StitchAuthRequest\";\nvar CoreStitchServiceClientImpl = (function () {\n    function CoreStitchServiceClientImpl(requestClient, routes, name) {\n        this.requestClient = requestClient;\n        this.serviceRoutes = routes;\n        this.serviceName = name;\n    }\n    CoreStitchServiceClientImpl.prototype.callFunction = function (name, args, decoder) {\n        return this.requestClient.doAuthenticatedRequestWithDecoder(this.getCallServiceFunctionRequest(name, args), decoder);\n    };\n    CoreStitchServiceClientImpl.prototype.streamFunction = function (name, args, decoder) {\n        return this.requestClient.openAuthenticatedStreamWithDecoder(this.getStreamServiceFunctionRequest(name, args), decoder);\n    };\n    CoreStitchServiceClientImpl.prototype.getStreamServiceFunctionRequest = function (name, args) {\n        var body = { name: name };\n        if (this.serviceName !== undefined) {\n            body[\"service\"] = this.serviceName;\n        }\n        body[\"arguments\"] = args;\n        var reqBuilder = new StitchAuthRequest.Builder();\n        reqBuilder\n            .withMethod(Method.GET)\n            .withPath(this.serviceRoutes.functionCallRoute +\n            (\"?stitch_request=\" + encodeURIComponent(base64Encode(JSON.stringify(body)))));\n        return reqBuilder.build();\n    };\n    CoreStitchServiceClientImpl.prototype.getCallServiceFunctionRequest = function (name, args) {\n        var body = { name: name };\n        if (this.serviceName !== undefined) {\n            body[\"service\"] = this.serviceName;\n        }\n        body[\"arguments\"] = args;\n        var reqBuilder = new StitchAuthDocRequest.Builder();\n        reqBuilder\n            .withMethod(Method.POST)\n            .withPath(this.serviceRoutes.functionCallRoute);\n        reqBuilder.withDocument(body);\n        return reqBuilder.build();\n    };\n    return CoreStitchServiceClientImpl;\n}());\nexport default CoreStitchServiceClientImpl;\n//# sourceMappingURL=CoreStitchServiceClientImpl.js.map"]},"metadata":{},"sourceType":"module"}