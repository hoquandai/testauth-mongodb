{"ast":null,"code":"import { handleRequestError } from \"../../internal/common/StitchErrorUtils\";\nimport { StitchRequestErrorCode } from \"../../StitchRequestErrorCode\";\nimport StitchError from \"../../StitchError\";\nimport StitchRequestError from \"../../StitchRequestError\";\nimport { BasicRequest } from \"./BasicRequest\";\n\nfunction inspectResponse(response) {\n  if (response.statusCode >= 200 && response.statusCode < 300) {\n    return response;\n  }\n\n  return handleRequestError(response);\n}\n\nvar StitchRequestClient = function () {\n  function StitchRequestClient(baseUrl, transport) {\n    this.baseUrl = baseUrl;\n    this.transport = transport;\n  }\n\n  StitchRequestClient.prototype.doRequest = function (stitchReq) {\n    return this.transport.roundTrip(this.buildRequest(stitchReq)).catch(function (error) {\n      throw new StitchRequestError(error, StitchRequestErrorCode.TRANSPORT_ERROR);\n    }).then(inspectResponse);\n  };\n\n  StitchRequestClient.prototype.doStreamRequest = function (stitchReq, open, retryRequest) {\n    if (open === void 0) {\n      open = true;\n    }\n\n    return this.transport.stream(this.buildRequest(stitchReq), open, retryRequest).catch(function (error) {\n      if (error instanceof StitchError) {\n        throw error;\n      }\n\n      throw new StitchRequestError(error, StitchRequestErrorCode.TRANSPORT_ERROR);\n    });\n  };\n\n  StitchRequestClient.prototype.buildRequest = function (stitchReq) {\n    return new BasicRequest.Builder().withMethod(stitchReq.method).withUrl(\"\" + this.baseUrl + stitchReq.path).withHeaders(stitchReq.headers).withBody(stitchReq.body).build();\n  };\n\n  return StitchRequestClient;\n}();\n\nexport default StitchRequestClient;","map":{"version":3,"sources":["../../../../src/internal/net/StitchRequestClient.ts"],"names":[],"mappings":"AAiBA,SAAS,kBAAT,QAAmC,wCAAnC;AACA,SAAS,sBAAT,QAAuC,8BAAvC;AACA,OAAO,WAAP,MAAwB,mBAAxB;AACA,OAAO,kBAAP,MAA+B,0BAA/B;AACA,SAAS,YAAT,QAA6B,gBAA7B;;AASA,SAAA,eAAA,CAAyB,QAAzB,EAA2C;AACzC,MAAI,QAAQ,CAAC,UAAT,IAAuB,GAAvB,IAA8B,QAAQ,CAAC,UAAT,GAAsB,GAAxD,EAA6D;AAC3D,WAAO,QAAP;AACD;;AAED,SAAO,kBAAkB,CAAC,QAAD,CAAzB;AACD;;AAGD,IAAA,mBAAA,GAAA,YAAA;AAIE,WAAA,mBAAA,CAAmB,OAAnB,EAAoC,SAApC,EAAwD;AACtD,SAAK,OAAL,GAAe,OAAf;AACA,SAAK,SAAL,GAAiB,SAAjB;AACD;;AAEM,EAAA,mBAAA,CAAA,SAAA,CAAA,SAAA,GAAP,UAAiB,SAAjB,EAAyC;AACvC,WAAO,KAAK,SAAL,CACJ,SADI,CACM,KAAK,YAAL,CAAkB,SAAlB,CADN,EAEJ,KAFI,CAEE,UAAA,KAAA,EAAK;AACV,YAAM,IAAI,kBAAJ,CACJ,KADI,EAEJ,sBAAsB,CAAC,eAFnB,CAAN;AAID,KAPI,EAQJ,IARI,CAQC,eARD,CAAP;AASD,GAVM;;AAYA,EAAA,mBAAA,CAAA,SAAA,CAAA,eAAA,GAAP,UAAuB,SAAvB,EAAiD,IAAjD,EAAuE,YAAvE,EAAgH;AAA/D,QAAA,IAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,IAAA,GAAA,IAAA;AAAoB;;AACnE,WAAO,KAAK,SAAL,CACJ,MADI,CACG,KAAK,YAAL,CAAkB,SAAlB,CADH,EACiC,IADjC,EACuC,YADvC,EAEJ,KAFI,CAEE,UAAA,KAAA,EAAK;AAEV,UAAI,KAAK,YAAY,WAArB,EAAkC;AAC/B,cAAM,KAAN;AACF;;AACD,YAAM,IAAI,kBAAJ,CACJ,KADI,EAEJ,sBAAsB,CAAC,eAFnB,CAAN;AAID,KAXI,CAAP;AAYD,GAbM;;AAeC,EAAA,mBAAA,CAAA,SAAA,CAAA,YAAA,GAAR,UAAqB,SAArB,EAA6C;AAC3C,WAAO,IAAI,YAAY,CAAC,OAAjB,GACJ,UADI,CACO,SAAS,CAAC,MADjB,EAEJ,OAFI,CAEI,KAAG,KAAK,OAAR,GAAkB,SAAS,CAAC,IAFhC,EAGJ,WAHI,CAGQ,SAAS,CAAC,OAHlB,EAIJ,QAJI,CAIK,SAAS,CAAC,IAJf,EAKJ,KALI,EAAP;AAMD,GAPO;;AAQV,SAAA,mBAAA;AAAC,CA5CD,EAAA","sourceRoot":"","sourcesContent":["import { handleRequestError } from \"../../internal/common/StitchErrorUtils\";\nimport { StitchRequestErrorCode } from \"../../StitchRequestErrorCode\";\nimport StitchError from \"../../StitchError\";\nimport StitchRequestError from \"../../StitchRequestError\";\nimport { BasicRequest } from \"./BasicRequest\";\nfunction inspectResponse(response) {\n    if (response.statusCode >= 200 && response.statusCode < 300) {\n        return response;\n    }\n    return handleRequestError(response);\n}\nvar StitchRequestClient = (function () {\n    function StitchRequestClient(baseUrl, transport) {\n        this.baseUrl = baseUrl;\n        this.transport = transport;\n    }\n    StitchRequestClient.prototype.doRequest = function (stitchReq) {\n        return this.transport\n            .roundTrip(this.buildRequest(stitchReq))\n            .catch(function (error) {\n            throw new StitchRequestError(error, StitchRequestErrorCode.TRANSPORT_ERROR);\n        })\n            .then(inspectResponse);\n    };\n    StitchRequestClient.prototype.doStreamRequest = function (stitchReq, open, retryRequest) {\n        if (open === void 0) { open = true; }\n        return this.transport\n            .stream(this.buildRequest(stitchReq), open, retryRequest)\n            .catch(function (error) {\n            if (error instanceof StitchError) {\n                throw error;\n            }\n            throw new StitchRequestError(error, StitchRequestErrorCode.TRANSPORT_ERROR);\n        });\n    };\n    StitchRequestClient.prototype.buildRequest = function (stitchReq) {\n        return new BasicRequest.Builder()\n            .withMethod(stitchReq.method)\n            .withUrl(\"\" + this.baseUrl + stitchReq.path)\n            .withHeaders(stitchReq.headers)\n            .withBody(stitchReq.body)\n            .build();\n    };\n    return StitchRequestClient;\n}());\nexport default StitchRequestClient;\n//# sourceMappingURL=StitchRequestClient.js.map"]},"metadata":{},"sourceType":"module"}