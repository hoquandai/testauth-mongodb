{"ast":null,"code":"import buffer from 'buffer';\nimport mongodbStitchBson from 'mongodb-stitch-bson';\nvar Buffer = buffer.Buffer;\n/**\n * Module dependencies.\n * @ignore\n */\n\nfunction convert(integer) {\n  var str = Number(integer).toString(16);\n  return str.length === 1 ? '0' + str : str;\n}\n\nfunction toExtendedJSON(obj) {\n  var base64String = Buffer.isBuffer(obj.buffer) ? obj.buffer.toString('base64') : Buffer.from(obj.buffer).toString('base64');\n  return {\n    $binary: {\n      base64: base64String,\n      subType: convert(obj.sub_type)\n    }\n  };\n}\n\nfunction fromExtendedJSON(BSON, doc) {\n  var type = doc.$binary.subType ? parseInt(doc.$binary.subType, 16) : 0;\n  var data = new Buffer(doc.$binary.base64, 'base64');\n  return new BSON.Binary(data, type);\n}\n\nvar binary = {\n  toExtendedJSON: toExtendedJSON,\n  fromExtendedJSON: fromExtendedJSON\n};\n\nfunction toExtendedJSON$1(obj) {\n  if (obj.scope) {\n    return {\n      $code: obj.code,\n      $scope: obj.scope\n    };\n  }\n\n  return {\n    $code: obj.code\n  };\n}\n\nfunction fromExtendedJSON$1(BSON, doc) {\n  return new BSON.Code(doc.$code, doc.$scope);\n}\n\nvar code = {\n  toExtendedJSON: toExtendedJSON$1,\n  fromExtendedJSON: fromExtendedJSON$1\n};\n\nfunction toExtendedJSON$2(obj) {\n  var o = {\n    $ref: obj.collection,\n    $id: obj.oid\n  };\n  if (obj.db) o.$db = obj.db;\n  o = Object.assign(o, obj.fields);\n  return o;\n}\n\nfunction fromExtendedJSON$2(BSON, doc) {\n  var copy = Object.assign({}, doc);\n  ['$ref', '$id', '$db'].forEach(function (k) {\n    return delete copy[k];\n  });\n  return new BSON.DBRef(doc.$ref, doc.$id, doc.$db, copy);\n}\n\nvar db_ref = {\n  toExtendedJSON: toExtendedJSON$2,\n  fromExtendedJSON: fromExtendedJSON$2\n};\n\nfunction toExtendedJSON$3(obj) {\n  return {\n    $numberDecimal: obj.toString()\n  };\n}\n\nfunction fromExtendedJSON$3(BSON, doc) {\n  return new BSON.Decimal128.fromString(doc.$numberDecimal);\n}\n\nvar decimal128 = {\n  toExtendedJSON: toExtendedJSON$3,\n  fromExtendedJSON: fromExtendedJSON$3\n};\n\nfunction toExtendedJSON$4(obj, options) {\n  if (options && options.relaxed && isFinite(obj.value)) return obj.value;\n  return {\n    $numberDouble: obj.value.toString()\n  };\n}\n\nfunction fromExtendedJSON$4(BSON, doc, options) {\n  return options && options.relaxed ? parseFloat(doc.$numberDouble) : new BSON.Double(parseFloat(doc.$numberDouble));\n}\n\nvar double_1 = {\n  toExtendedJSON: toExtendedJSON$4,\n  fromExtendedJSON: fromExtendedJSON$4\n};\n\nfunction toExtendedJSON$5(obj, options) {\n  if (options && options.relaxed) return obj.value;\n  return {\n    $numberInt: obj.value.toString()\n  };\n}\n\nfunction fromExtendedJSON$5(BSON, doc, options) {\n  return options && options.relaxed ? parseInt(doc.$numberInt, 10) : new BSON.Int32(doc.$numberInt);\n}\n\nvar int_32 = {\n  toExtendedJSON: toExtendedJSON$5,\n  fromExtendedJSON: fromExtendedJSON$5\n};\n\nfunction toExtendedJSON$6(obj, options) {\n  if (options && options.relaxed) return obj.toNumber();\n  return {\n    $numberLong: obj.toString()\n  };\n}\n\nfunction fromExtendedJSON$6(BSON, doc, options) {\n  var result = BSON.Long.fromString(doc.$numberLong);\n  return options && options.relaxed ? result.toNumber() : result;\n}\n\nvar long_1 = {\n  toExtendedJSON: toExtendedJSON$6,\n  fromExtendedJSON: fromExtendedJSON$6\n};\n\nfunction toExtendedJSON$7() {\n  return {\n    $maxKey: 1\n  };\n}\n\nfunction fromExtendedJSON$7(BSON) {\n  return new BSON.MaxKey();\n}\n\nvar max_key = {\n  toExtendedJSON: toExtendedJSON$7,\n  fromExtendedJSON: fromExtendedJSON$7\n};\n\nfunction toExtendedJSON$8() {\n  return {\n    $minKey: 1\n  };\n}\n\nfunction fromExtendedJSON$8(BSON) {\n  return new BSON.MinKey();\n}\n\nvar min_key = {\n  toExtendedJSON: toExtendedJSON$8,\n  fromExtendedJSON: fromExtendedJSON$8\n};\n\nfunction toExtendedJSON$9(obj) {\n  if (obj.toHexString) return {\n    $oid: obj.toHexString()\n  };\n  return {\n    $oid: obj.toString('hex')\n  };\n}\n\nfunction fromExtendedJSON$9(BSON, doc) {\n  return new BSON.ObjectID(doc.$oid);\n}\n\nvar objectid = {\n  toExtendedJSON: toExtendedJSON$9,\n  fromExtendedJSON: fromExtendedJSON$9\n};\n\nfunction toExtendedJSON$10(obj) {\n  return {\n    $regularExpression: {\n      pattern: obj.pattern,\n      options: obj.options\n    }\n  };\n}\n\nfunction fromExtendedJSON$10(BSON, doc) {\n  return new BSON.BSONRegExp(doc.$regularExpression.pattern, doc.$regularExpression.options.split('').sort().join(''));\n}\n\nvar regexp = {\n  toExtendedJSON: toExtendedJSON$10,\n  fromExtendedJSON: fromExtendedJSON$10\n};\n\nfunction toExtendedJSON$11(obj) {\n  return {\n    $symbol: obj.value\n  };\n}\n\nfunction fromExtendedJSON$11(BSON, doc) {\n  return new BSON.Symbol(doc.$symbol);\n}\n\nvar symbol = {\n  toExtendedJSON: toExtendedJSON$11,\n  fromExtendedJSON: fromExtendedJSON$11\n};\n\nfunction toExtendedJSON$12(obj) {\n  return {\n    $timestamp: {\n      t: obj.high_,\n      i: obj.low_\n    }\n  };\n}\n\nfunction fromExtendedJSON$12(BSON, doc) {\n  return new BSON.Timestamp(doc.$timestamp.i, doc.$timestamp.t);\n}\n\nvar timestamp = {\n  toExtendedJSON: toExtendedJSON$12,\n  fromExtendedJSON: fromExtendedJSON$12\n};\nvar bson = {\n  Binary: binary,\n  Code: code,\n  DBRef: db_ref,\n  Decimal128: decimal128,\n  Double: double_1,\n  Int32: int_32,\n  Long: long_1,\n  MaxKey: max_key,\n  MinKey: min_key,\n  ObjectID: objectid,\n  BSONRegExp: regexp,\n  Symbol: symbol,\n  Timestamp: timestamp\n};\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nvar BSON = mongodbStitchBson;\nvar BSONTypes = ['Binary', 'Code', 'DBRef', 'Decimal128', 'Double', 'Int32', 'Long', 'MaxKey', 'MinKey', 'ObjectID', 'BSONRegExp', 'Symbol', 'Timestamp'];\nsetBSONModule(BSON); // all the types where we don't need to do any special processing and can just pass the EJSON\n//straight to type.fromExtendedJSON\n\nvar keysToCodecs = {\n  $oid: bson.ObjectID,\n  $binary: bson.Binary,\n  $symbol: bson.Symbol,\n  $numberInt: bson.Int32,\n  $numberDecimal: bson.Decimal128,\n  $numberDouble: bson.Double,\n  $numberLong: bson.Long,\n  $minKey: bson.MinKey,\n  $maxKey: bson.MaxKey,\n  $regularExpression: bson.BSONRegExp,\n  $timestamp: bson.Timestamp\n};\n\nfunction setBSONModule(module) {\n  BSONTypes.forEach(function (t) {\n    if (!module[t]) throw new Error('passed in module does not contain all BSON types required');\n  });\n  BSON = module;\n}\n\nfunction deserializeValue(self, key, value, options) {\n  if (typeof value === 'number') {\n    // if it's an integer, should interpret as smallest BSON integer\n    // that can represent it exactly. (if out of range, interpret as double.)\n    if (Math.floor(value) === value) {\n      var int32Range = value >= BSON_INT32_MIN && value <= BSON_INT32_MAX,\n          int64Range = value >= BSON_INT64_MIN && value <= BSON_INT64_MAX;\n      if (int32Range) return options.strict ? new BSON.Int32(value) : value;\n      if (int64Range) return options.strict ? new BSON.Long.fromNumber(value) : value;\n    } // If the number is a non-integer or out of integer range, should interpret as BSON Double.\n\n\n    return new BSON.Double(value);\n  } // from here on out we're looking for bson types, so bail if its not an object\n\n\n  if (value == null || (typeof value === 'undefined' ? 'undefined' : _typeof(value)) !== 'object') return value; // upgrade deprecated undefined to null\n\n  if (value.$undefined) return null;\n  var keys = Object.keys(value).filter(function (k) {\n    return k.startsWith('$') && value[k] != null;\n  });\n\n  for (var i = 0; i < keys.length; i++) {\n    var c = keysToCodecs[keys[i]];\n    if (c) return c.fromExtendedJSON(BSON, value, options);\n  }\n\n  if (value.$date != null) {\n    var d = value.$date,\n        date = new Date();\n    if (typeof d === 'string') date.setTime(Date.parse(d));else if (d instanceof BSON.Long) date.setTime(d.toNumber());else if (typeof d === 'number' && options.relaxed) date.setTime(d);\n    return date;\n  }\n\n  if (value.$code != null) {\n    if (value.$scope) var scope = deserializeValue(self, null, value.$scope);\n    var copy = Object.assign({}, value);\n    copy.$scope = scope;\n    return bson.Code.fromExtendedJSON(BSON, value);\n  }\n\n  if (value.$ref != null || value.$dbPointer != null) {\n    var v = value.$ref ? value : value.$dbPointer; // we run into this in a \"degenerate EJSON\" case (with $id and $ref order flipped)\n    // because of the order JSON.parse goes through the document\n\n    if (v instanceof BSON.DBRef) return v;\n    var dollarKeys = Object.keys(v).filter(function (k) {\n      return k.startsWith('$');\n    }),\n        valid = true;\n    dollarKeys.forEach(function (k) {\n      if (['$ref', '$id', '$db'].indexOf(k) === -1) valid = false;\n    }); // only make DBRef if $ keys are all valid\n\n    if (valid) return bson.DBRef.fromExtendedJSON(BSON, v);\n  }\n\n  return value;\n}\n\nvar parse = function parse(text, options) {\n  var self = this;\n  options = options || {\n    relaxed: false\n  }; // relaxed implies not strict\n\n  if (typeof options.relaxed === 'boolean') options.strict = !options.relaxed;\n  if (typeof options.strict === 'boolean') options.relaxed = !options.strict;\n  return JSON.parse(text, function (key, value) {\n    return deserializeValue(self, key, value, options);\n  });\n}; //\n// Serializer\n//\n// MAX INT32 boundaries\n\n\nvar BSON_INT32_MAX = 0x7fffffff,\n    BSON_INT32_MIN = -0x80000000,\n    BSON_INT64_MAX = 0x7fffffffffffffff,\n    BSON_INT64_MIN = -0x8000000000000000;\n\nvar stringify = function stringify(value, reducer, indents, options) {\n  var opts = {};\n  if (options != null && (typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object') opts = options;else if (indents != null && (typeof indents === 'undefined' ? 'undefined' : _typeof(indents)) === 'object') {\n    opts = indents;\n    indents = 0;\n  } else if (reducer != null && (typeof reducer === 'undefined' ? 'undefined' : _typeof(reducer)) === 'object') {\n    opts = reducer;\n    reducer = null;\n  }\n  var doc = Array.isArray(value) ? serializeArray(value, opts) : serializeDocument(value, opts);\n  return JSON.stringify(doc, reducer, indents);\n};\n\nfunction serializeArray(array, options) {\n  return array.map(function (v) {\n    return serializeValue(v, options);\n  });\n}\n\nfunction getISOString(date) {\n  var isoStr = date.toISOString(); // we should only show milliseconds in timestamp if they're non-zero\n\n  return date.getUTCMilliseconds() !== 0 ? isoStr : isoStr.slice(0, -5) + 'Z';\n}\n\nfunction serializeValue(value, options) {\n  if (Array.isArray(value)) return serializeArray(value, options);\n  if (value === undefined) return null;\n\n  if (value instanceof Date) {\n    var dateNum = value.getTime(),\n        // is it in year range 1970-9999?\n    inRange = dateNum > -1 && dateNum < 253402318800000;\n    return options.relaxed && inRange ? {\n      $date: getISOString(value)\n    } : {\n      $date: {\n        $numberLong: value.getTime().toString()\n      }\n    };\n  }\n\n  if (typeof value === 'number' && !options.relaxed) {\n    // it's an integer\n    if (Math.floor(value) === value) {\n      var int32Range = value >= BSON_INT32_MIN && value <= BSON_INT32_MAX,\n          int64Range = value >= BSON_INT64_MIN && value <= BSON_INT64_MAX; // interpret as being of the smallest BSON integer type that can represent the number exactly\n\n      if (int32Range) return {\n        $numberInt: value.toString()\n      };\n      if (int64Range) return {\n        $numberLong: value.toString()\n      };\n    }\n\n    return {\n      $numberDouble: value.toString()\n    };\n  }\n\n  if (value != null && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object') return serializeDocument(value, options);\n  return value;\n}\n\nfunction serializeDocument(doc, options) {\n  if (doc == null || (typeof doc === 'undefined' ? 'undefined' : _typeof(doc)) !== 'object') throw new Error('not an object instance'); // the document itself is a BSON type\n\n  if (doc._bsontype && BSONTypes.indexOf(doc._bsontype) !== -1) {\n    // we need to separately serialize the embedded scope document\n    if (doc._bsontype === 'Code' && doc.scope) {\n      var tempScope = serializeDocument(doc.scope, options),\n          tempDoc = Object.assign({}, doc, {\n        scope: tempScope\n      });\n      return bson['Code'].toExtendedJSON(tempDoc, options); // we need to separately serialize the embedded OID document\n    } else if (doc._bsontype === 'DBRef' && doc.oid) {\n      var tempId = serializeDocument(doc.oid, options),\n          _tempDoc = Object.assign({}, doc, {\n        oid: tempId\n      });\n\n      return bson['DBRef'].toExtendedJSON(_tempDoc, options);\n    }\n\n    return bson[doc._bsontype].toExtendedJSON(doc, options);\n  } // the document is an object with nested BSON types\n\n\n  var _doc = {};\n\n  for (var name in doc) {\n    var val = doc[name];\n\n    if (Array.isArray(val)) {\n      _doc[name] = serializeArray(val, options);\n    } else if (val != null && val._bsontype && BSONTypes.indexOf(val._bsontype) !== -1) {\n      // we need to separately serialize the embedded scope document\n      if (val._bsontype === 'Code' && val.scope) {\n        var _tempScope = serializeDocument(val.scope, options),\n            tempVal = Object.assign({}, val, {\n          scope: _tempScope\n        });\n\n        _doc[name] = bson['Code'].toExtendedJSON(tempVal, options); // we need to separately serialize the embedded OID document\n      } else if (val._bsontype === 'DBRef' && val.oid) {\n        var _tempId = serializeDocument(val.oid, options),\n            _tempVal = Object.assign({}, val, {\n          oid: _tempId\n        });\n\n        _doc[name] = bson['DBRef'].toExtendedJSON(_tempVal, options);\n      } else _doc[name] = bson[val._bsontype].toExtendedJSON(val, options);\n    } else if (val instanceof Date) {\n      _doc[name] = serializeValue(val, options);\n    } else if (val != null && (typeof val === 'undefined' ? 'undefined' : _typeof(val)) === 'object') {\n      _doc[name] = serializeDocument(val, options);\n    }\n\n    _doc[name] = serializeValue(val, options);\n\n    if (val instanceof RegExp) {\n      var flags = val.flags;\n\n      if (flags === undefined) {\n        flags = val.toString().match(/[gimuy]*$/)[0];\n      }\n\n      _doc[name] = bson['BSONRegExp'].toExtendedJSON({\n        pattern: val.source,\n        options: flags\n      });\n    }\n  }\n\n  return _doc;\n}\n\nvar ext_json = {\n  parse: parse,\n  stringify: stringify,\n  setBSONModule: setBSONModule,\n  BSON: BSON\n};\nvar mongodbExtjson = {\n  parse: ext_json.parse,\n  stringify: ext_json.stringify,\n  setBSONModule: ext_json.setBSONModule,\n  BSON: ext_json.BSON\n};\nvar mongodbExtjson_1 = mongodbExtjson.parse;\nvar mongodbExtjson_2 = mongodbExtjson.stringify;\nvar mongodbExtjson_3 = mongodbExtjson.setBSONModule;\nvar mongodbExtjson_4 = mongodbExtjson.BSON;\nexport default mongodbExtjson;\nexport { mongodbExtjson_1 as parse, mongodbExtjson_2 as stringify, mongodbExtjson_3 as setBSONModule, mongodbExtjson_4 as BSON };","map":{"version":3,"sources":["/home/lake/Documents/mongodb/testauth/node_modules/mongodb-stitch-extjson/dist/ejson.browser.esm.js"],"names":["buffer","mongodbStitchBson","Buffer","convert","integer","str","Number","toString","length","toExtendedJSON","obj","base64String","isBuffer","from","$binary","base64","subType","sub_type","fromExtendedJSON","BSON","doc","type","parseInt","data","Binary","binary","toExtendedJSON$1","scope","$code","code","$scope","fromExtendedJSON$1","Code","toExtendedJSON$2","o","$ref","collection","$id","oid","db","$db","Object","assign","fields","fromExtendedJSON$2","copy","forEach","k","DBRef","db_ref","toExtendedJSON$3","$numberDecimal","fromExtendedJSON$3","Decimal128","fromString","decimal128","toExtendedJSON$4","options","relaxed","isFinite","value","$numberDouble","fromExtendedJSON$4","parseFloat","Double","double_1","toExtendedJSON$5","$numberInt","fromExtendedJSON$5","Int32","int_32","toExtendedJSON$6","toNumber","$numberLong","fromExtendedJSON$6","result","Long","long_1","toExtendedJSON$7","$maxKey","fromExtendedJSON$7","MaxKey","max_key","toExtendedJSON$8","$minKey","fromExtendedJSON$8","MinKey","min_key","toExtendedJSON$9","toHexString","$oid","fromExtendedJSON$9","ObjectID","objectid","toExtendedJSON$10","$regularExpression","pattern","fromExtendedJSON$10","BSONRegExp","split","sort","join","regexp","toExtendedJSON$11","$symbol","fromExtendedJSON$11","Symbol","symbol","toExtendedJSON$12","$timestamp","t","high_","i","low_","fromExtendedJSON$12","Timestamp","timestamp","bson","_typeof","iterator","constructor","prototype","BSONTypes","setBSONModule","keysToCodecs","module","Error","deserializeValue","self","key","Math","floor","int32Range","BSON_INT32_MIN","BSON_INT32_MAX","int64Range","BSON_INT64_MIN","BSON_INT64_MAX","strict","fromNumber","$undefined","keys","filter","startsWith","c","$date","d","date","Date","setTime","parse","$dbPointer","v","dollarKeys","valid","indexOf","text","JSON","stringify","reducer","indents","opts","Array","isArray","serializeArray","serializeDocument","array","map","serializeValue","getISOString","isoStr","toISOString","getUTCMilliseconds","slice","undefined","dateNum","getTime","inRange","_bsontype","tempScope","tempDoc","tempId","_tempDoc","_doc","name","val","_tempScope","tempVal","_tempId","_tempVal","RegExp","flags","match","source","ext_json","mongodbExtjson","mongodbExtjson_1","mongodbExtjson_2","mongodbExtjson_3","mongodbExtjson_4"],"mappings":"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","sourcesContent":["import buffer from 'buffer';\nimport mongodbStitchBson from 'mongodb-stitch-bson';\n\nvar Buffer = buffer.Buffer;\n\n/**\n * Module dependencies.\n * @ignore\n */\nfunction convert(integer) {\n  var str = Number(integer).toString(16);\n  return str.length === 1 ? '0' + str : str;\n}\n\nfunction toExtendedJSON(obj) {\n  var base64String = Buffer.isBuffer(obj.buffer) ? obj.buffer.toString('base64') : Buffer.from(obj.buffer).toString('base64');\n\n  return {\n    $binary: {\n      base64: base64String,\n      subType: convert(obj.sub_type)\n    }\n  };\n}\n\nfunction fromExtendedJSON(BSON, doc) {\n  var type = doc.$binary.subType ? parseInt(doc.$binary.subType, 16) : 0;\n\n  var data = new Buffer(doc.$binary.base64, 'base64');\n\n  return new BSON.Binary(data, type);\n}\n\nvar binary = {\n  toExtendedJSON: toExtendedJSON,\n  fromExtendedJSON: fromExtendedJSON\n};\n\nfunction toExtendedJSON$1(obj) {\n  if (obj.scope) {\n    return { $code: obj.code, $scope: obj.scope };\n  }\n\n  return { $code: obj.code };\n}\n\nfunction fromExtendedJSON$1(BSON, doc) {\n  return new BSON.Code(doc.$code, doc.$scope);\n}\n\nvar code = {\n  toExtendedJSON: toExtendedJSON$1,\n  fromExtendedJSON: fromExtendedJSON$1\n};\n\nfunction toExtendedJSON$2(obj) {\n  var o = {\n    $ref: obj.collection,\n    $id: obj.oid\n  };\n  if (obj.db) o.$db = obj.db;\n  o = Object.assign(o, obj.fields);\n  return o;\n}\n\nfunction fromExtendedJSON$2(BSON, doc) {\n  var copy = Object.assign({}, doc);\n  ['$ref', '$id', '$db'].forEach(function (k) {\n    return delete copy[k];\n  });\n  return new BSON.DBRef(doc.$ref, doc.$id, doc.$db, copy);\n}\n\nvar db_ref = {\n  toExtendedJSON: toExtendedJSON$2,\n  fromExtendedJSON: fromExtendedJSON$2\n};\n\nfunction toExtendedJSON$3(obj) {\n  return { $numberDecimal: obj.toString() };\n}\n\nfunction fromExtendedJSON$3(BSON, doc) {\n  return new BSON.Decimal128.fromString(doc.$numberDecimal);\n}\n\nvar decimal128 = {\n  toExtendedJSON: toExtendedJSON$3,\n  fromExtendedJSON: fromExtendedJSON$3\n};\n\nfunction toExtendedJSON$4(obj, options) {\n  if (options && options.relaxed && isFinite(obj.value)) return obj.value;\n  return { $numberDouble: obj.value.toString() };\n}\n\nfunction fromExtendedJSON$4(BSON, doc, options) {\n  return options && options.relaxed ? parseFloat(doc.$numberDouble) : new BSON.Double(parseFloat(doc.$numberDouble));\n}\n\nvar double_1 = {\n  toExtendedJSON: toExtendedJSON$4,\n  fromExtendedJSON: fromExtendedJSON$4\n};\n\nfunction toExtendedJSON$5(obj, options) {\n  if (options && options.relaxed) return obj.value;\n  return { $numberInt: obj.value.toString() };\n}\n\nfunction fromExtendedJSON$5(BSON, doc, options) {\n  return options && options.relaxed ? parseInt(doc.$numberInt, 10) : new BSON.Int32(doc.$numberInt);\n}\n\nvar int_32 = {\n  toExtendedJSON: toExtendedJSON$5,\n  fromExtendedJSON: fromExtendedJSON$5\n};\n\nfunction toExtendedJSON$6(obj, options) {\n  if (options && options.relaxed) return obj.toNumber();\n  return { $numberLong: obj.toString() };\n}\n\nfunction fromExtendedJSON$6(BSON, doc, options) {\n  var result = BSON.Long.fromString(doc.$numberLong);\n  return options && options.relaxed ? result.toNumber() : result;\n}\n\nvar long_1 = {\n  toExtendedJSON: toExtendedJSON$6,\n  fromExtendedJSON: fromExtendedJSON$6\n};\n\nfunction toExtendedJSON$7() {\n  return { $maxKey: 1 };\n}\n\nfunction fromExtendedJSON$7(BSON) {\n  return new BSON.MaxKey();\n}\n\nvar max_key = {\n  toExtendedJSON: toExtendedJSON$7,\n  fromExtendedJSON: fromExtendedJSON$7\n};\n\nfunction toExtendedJSON$8() {\n  return { $minKey: 1 };\n}\n\nfunction fromExtendedJSON$8(BSON) {\n  return new BSON.MinKey();\n}\n\nvar min_key = {\n  toExtendedJSON: toExtendedJSON$8,\n  fromExtendedJSON: fromExtendedJSON$8\n};\n\nfunction toExtendedJSON$9(obj) {\n  if (obj.toHexString) return { $oid: obj.toHexString() };\n  return { $oid: obj.toString('hex') };\n}\n\nfunction fromExtendedJSON$9(BSON, doc) {\n  return new BSON.ObjectID(doc.$oid);\n}\n\nvar objectid = {\n  toExtendedJSON: toExtendedJSON$9,\n  fromExtendedJSON: fromExtendedJSON$9\n};\n\nfunction toExtendedJSON$10(obj) {\n  return { $regularExpression: { pattern: obj.pattern, options: obj.options } };\n}\n\nfunction fromExtendedJSON$10(BSON, doc) {\n  return new BSON.BSONRegExp(doc.$regularExpression.pattern, doc.$regularExpression.options.split('').sort().join(''));\n}\n\nvar regexp = {\n  toExtendedJSON: toExtendedJSON$10,\n  fromExtendedJSON: fromExtendedJSON$10\n};\n\nfunction toExtendedJSON$11(obj) {\n  return { $symbol: obj.value };\n}\n\nfunction fromExtendedJSON$11(BSON, doc) {\n  return new BSON.Symbol(doc.$symbol);\n}\n\nvar symbol = {\n  toExtendedJSON: toExtendedJSON$11,\n  fromExtendedJSON: fromExtendedJSON$11\n};\n\nfunction toExtendedJSON$12(obj) {\n  return {\n    $timestamp: {\n      t: obj.high_,\n      i: obj.low_\n    }\n  };\n}\n\nfunction fromExtendedJSON$12(BSON, doc) {\n  return new BSON.Timestamp(doc.$timestamp.i, doc.$timestamp.t);\n}\n\nvar timestamp = {\n  toExtendedJSON: toExtendedJSON$12,\n  fromExtendedJSON: fromExtendedJSON$12\n};\n\nvar bson = {\n  Binary: binary,\n  Code: code,\n  DBRef: db_ref,\n  Decimal128: decimal128,\n  Double: double_1,\n  Int32: int_32,\n  Long: long_1,\n  MaxKey: max_key,\n  MinKey: min_key,\n  ObjectID: objectid,\n  BSONRegExp: regexp,\n  Symbol: symbol,\n  Timestamp: timestamp\n};\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nvar BSON = mongodbStitchBson;\n\nvar BSONTypes = ['Binary', 'Code', 'DBRef', 'Decimal128', 'Double', 'Int32', 'Long', 'MaxKey', 'MinKey', 'ObjectID', 'BSONRegExp', 'Symbol', 'Timestamp'];\n\nsetBSONModule(BSON);\n\n// all the types where we don't need to do any special processing and can just pass the EJSON\n//straight to type.fromExtendedJSON\nvar keysToCodecs = {\n  $oid: bson.ObjectID,\n  $binary: bson.Binary,\n  $symbol: bson.Symbol,\n  $numberInt: bson.Int32,\n  $numberDecimal: bson.Decimal128,\n  $numberDouble: bson.Double,\n  $numberLong: bson.Long,\n  $minKey: bson.MinKey,\n  $maxKey: bson.MaxKey,\n  $regularExpression: bson.BSONRegExp,\n  $timestamp: bson.Timestamp\n};\n\nfunction setBSONModule(module) {\n  BSONTypes.forEach(function (t) {\n    if (!module[t]) throw new Error('passed in module does not contain all BSON types required');\n  });\n  BSON = module;\n}\n\nfunction deserializeValue(self, key, value, options) {\n  if (typeof value === 'number') {\n    // if it's an integer, should interpret as smallest BSON integer\n    // that can represent it exactly. (if out of range, interpret as double.)\n    if (Math.floor(value) === value) {\n      var int32Range = value >= BSON_INT32_MIN && value <= BSON_INT32_MAX,\n          int64Range = value >= BSON_INT64_MIN && value <= BSON_INT64_MAX;\n\n      if (int32Range) return options.strict ? new BSON.Int32(value) : value;\n      if (int64Range) return options.strict ? new BSON.Long.fromNumber(value) : value;\n    }\n    // If the number is a non-integer or out of integer range, should interpret as BSON Double.\n    return new BSON.Double(value);\n  }\n\n  // from here on out we're looking for bson types, so bail if its not an object\n  if (value == null || (typeof value === 'undefined' ? 'undefined' : _typeof(value)) !== 'object') return value;\n\n  // upgrade deprecated undefined to null\n  if (value.$undefined) return null;\n\n  var keys = Object.keys(value).filter(function (k) {\n    return k.startsWith('$') && value[k] != null;\n  });\n  for (var i = 0; i < keys.length; i++) {\n    var c = keysToCodecs[keys[i]];\n    if (c) return c.fromExtendedJSON(BSON, value, options);\n  }\n\n  if (value.$date != null) {\n    var d = value.$date,\n        date = new Date();\n\n    if (typeof d === 'string') date.setTime(Date.parse(d));else if (d instanceof BSON.Long) date.setTime(d.toNumber());else if (typeof d === 'number' && options.relaxed) date.setTime(d);\n    return date;\n  }\n\n  if (value.$code != null) {\n    if (value.$scope) var scope = deserializeValue(self, null, value.$scope);\n    var copy = Object.assign({}, value);\n    copy.$scope = scope;\n    return bson.Code.fromExtendedJSON(BSON, value);\n  }\n\n  if (value.$ref != null || value.$dbPointer != null) {\n    var v = value.$ref ? value : value.$dbPointer;\n\n    // we run into this in a \"degenerate EJSON\" case (with $id and $ref order flipped)\n    // because of the order JSON.parse goes through the document\n    if (v instanceof BSON.DBRef) return v;\n\n    var dollarKeys = Object.keys(v).filter(function (k) {\n      return k.startsWith('$');\n    }),\n        valid = true;\n    dollarKeys.forEach(function (k) {\n      if (['$ref', '$id', '$db'].indexOf(k) === -1) valid = false;\n    });\n\n    // only make DBRef if $ keys are all valid\n    if (valid) return bson.DBRef.fromExtendedJSON(BSON, v);\n  }\n\n  return value;\n}\n\nvar parse = function parse(text, options) {\n  var self = this;\n  options = options || { relaxed: false };\n\n  // relaxed implies not strict\n  if (typeof options.relaxed === 'boolean') options.strict = !options.relaxed;\n  if (typeof options.strict === 'boolean') options.relaxed = !options.strict;\n\n  return JSON.parse(text, function (key, value) {\n    return deserializeValue(self, key, value, options);\n  });\n};\n\n//\n// Serializer\n//\n\n// MAX INT32 boundaries\nvar BSON_INT32_MAX = 0x7fffffff,\n    BSON_INT32_MIN = -0x80000000,\n    BSON_INT64_MAX = 0x7fffffffffffffff,\n    BSON_INT64_MIN = -0x8000000000000000;\n\nvar stringify = function stringify(value, reducer, indents, options) {\n  var opts = {};\n  if (options != null && (typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object') opts = options;else if (indents != null && (typeof indents === 'undefined' ? 'undefined' : _typeof(indents)) === 'object') {\n    opts = indents;\n    indents = 0;\n  } else if (reducer != null && (typeof reducer === 'undefined' ? 'undefined' : _typeof(reducer)) === 'object') {\n    opts = reducer;\n    reducer = null;\n  }\n\n  var doc = Array.isArray(value) ? serializeArray(value, opts) : serializeDocument(value, opts);\n  return JSON.stringify(doc, reducer, indents);\n};\n\nfunction serializeArray(array, options) {\n  return array.map(function (v) {\n    return serializeValue(v, options);\n  });\n}\n\nfunction getISOString(date) {\n  var isoStr = date.toISOString();\n  // we should only show milliseconds in timestamp if they're non-zero\n  return date.getUTCMilliseconds() !== 0 ? isoStr : isoStr.slice(0, -5) + 'Z';\n}\n\nfunction serializeValue(value, options) {\n  if (Array.isArray(value)) return serializeArray(value, options);\n\n  if (value === undefined) return null;\n\n  if (value instanceof Date) {\n    var dateNum = value.getTime(),\n\n    // is it in year range 1970-9999?\n    inRange = dateNum > -1 && dateNum < 253402318800000;\n\n    return options.relaxed && inRange ? { $date: getISOString(value) } : { $date: { $numberLong: value.getTime().toString() } };\n  }\n\n  if (typeof value === 'number' && !options.relaxed) {\n    // it's an integer\n    if (Math.floor(value) === value) {\n      var int32Range = value >= BSON_INT32_MIN && value <= BSON_INT32_MAX,\n          int64Range = value >= BSON_INT64_MIN && value <= BSON_INT64_MAX;\n\n      // interpret as being of the smallest BSON integer type that can represent the number exactly\n      if (int32Range) return { $numberInt: value.toString() };\n      if (int64Range) return { $numberLong: value.toString() };\n    }\n    return { $numberDouble: value.toString() };\n  }\n\n  if (value != null && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object') return serializeDocument(value, options);\n  return value;\n}\n\nfunction serializeDocument(doc, options) {\n  if (doc == null || (typeof doc === 'undefined' ? 'undefined' : _typeof(doc)) !== 'object') throw new Error('not an object instance');\n\n  // the document itself is a BSON type\n  if (doc._bsontype && BSONTypes.indexOf(doc._bsontype) !== -1) {\n    // we need to separately serialize the embedded scope document\n    if (doc._bsontype === 'Code' && doc.scope) {\n      var tempScope = serializeDocument(doc.scope, options),\n          tempDoc = Object.assign({}, doc, { scope: tempScope });\n      return bson['Code'].toExtendedJSON(tempDoc, options);\n      // we need to separately serialize the embedded OID document\n    } else if (doc._bsontype === 'DBRef' && doc.oid) {\n      var tempId = serializeDocument(doc.oid, options),\n          _tempDoc = Object.assign({}, doc, { oid: tempId });\n      return bson['DBRef'].toExtendedJSON(_tempDoc, options);\n    }\n    return bson[doc._bsontype].toExtendedJSON(doc, options);\n  }\n\n  // the document is an object with nested BSON types\n  var _doc = {};\n  for (var name in doc) {\n    var val = doc[name];\n    if (Array.isArray(val)) {\n      _doc[name] = serializeArray(val, options);\n    } else if (val != null && val._bsontype && BSONTypes.indexOf(val._bsontype) !== -1) {\n      // we need to separately serialize the embedded scope document\n      if (val._bsontype === 'Code' && val.scope) {\n        var _tempScope = serializeDocument(val.scope, options),\n            tempVal = Object.assign({}, val, { scope: _tempScope });\n        _doc[name] = bson['Code'].toExtendedJSON(tempVal, options);\n        // we need to separately serialize the embedded OID document\n      } else if (val._bsontype === 'DBRef' && val.oid) {\n        var _tempId = serializeDocument(val.oid, options),\n            _tempVal = Object.assign({}, val, { oid: _tempId });\n        _doc[name] = bson['DBRef'].toExtendedJSON(_tempVal, options);\n      } else _doc[name] = bson[val._bsontype].toExtendedJSON(val, options);\n    } else if (val instanceof Date) {\n      _doc[name] = serializeValue(val, options);\n    } else if (val != null && (typeof val === 'undefined' ? 'undefined' : _typeof(val)) === 'object') {\n      _doc[name] = serializeDocument(val, options);\n    }\n    _doc[name] = serializeValue(val, options);\n    if (val instanceof RegExp) {\n      var flags = val.flags;\n      if (flags === undefined) {\n        flags = val.toString().match(/[gimuy]*$/)[0];\n      }\n      _doc[name] = bson['BSONRegExp'].toExtendedJSON({ pattern: val.source, options: flags });\n    }\n  }\n\n  return _doc;\n}\n\nvar ext_json = {\n  parse: parse,\n  stringify: stringify,\n  setBSONModule: setBSONModule,\n  BSON: BSON\n};\n\nvar mongodbExtjson = {\n  parse: ext_json.parse,\n  stringify: ext_json.stringify,\n  setBSONModule: ext_json.setBSONModule,\n  BSON: ext_json.BSON\n};\nvar mongodbExtjson_1 = mongodbExtjson.parse;\nvar mongodbExtjson_2 = mongodbExtjson.stringify;\nvar mongodbExtjson_3 = mongodbExtjson.setBSONModule;\nvar mongodbExtjson_4 = mongodbExtjson.BSON;\n\nexport default mongodbExtjson;\nexport { mongodbExtjson_1 as parse, mongodbExtjson_2 as stringify, mongodbExtjson_3 as setBSONModule, mongodbExtjson_4 as BSON };\n"]},"metadata":{},"sourceType":"module"}