{"ast":null,"code":"var __assign = this && this.__assign || Object.assign || function (t) {\n  for (var s, i = 1, n = arguments.length; i < n; i++) {\n    s = arguments[i];\n\n    for (var p in s) {\n      if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n  }\n\n  return t;\n};\n\nimport { ContentTypes, Headers, Response, handleRequestError } from \"mongodb-stitch-core-sdk\";\nimport ReaderEventStream from \"./ReaderEventStream\";\nimport EventSourceEventStream from \"./EventSourceEventStream\";\nimport fetch from \"fetch-everywhere\";\n\nvar FetchStreamTransport = function () {\n  function FetchStreamTransport() {}\n\n  FetchStreamTransport.prototype.roundTrip = function (request) {\n    var responsePromise = fetch(request.url, {\n      body: request.body,\n      headers: request.headers,\n      method: request.method,\n      mode: 'cors'\n    });\n    var responseTextPromise = responsePromise.then(function (response) {\n      return response.text();\n    });\n    return Promise.all([responsePromise, responseTextPromise]).then(function (values) {\n      var response = values[0];\n      var body = values[1];\n      var headers = {};\n      response.headers.forEach(function (value, key) {\n        headers[key] = value;\n      });\n      return new Response(headers, response.status, body);\n    });\n  };\n\n  FetchStreamTransport.prototype.stream = function (request, open, retryRequest) {\n    if (open === void 0) {\n      open = true;\n    }\n\n    var rsSupported;\n\n    try {\n      new ReadableStream();\n      rsSupported = true;\n    } catch (err) {\n      rsSupported = false;\n    }\n\n    var headers = __assign({}, request.headers);\n\n    headers[Headers.ACCEPT] = ContentTypes.TEXT_EVENT_STREAM;\n    headers[Headers.CONTENT_TYPE] = ContentTypes.TEXT_EVENT_STREAM;\n\n    if (!rsSupported) {\n      return fetch(request.url + \"&stitch_validate=true\", {\n        body: request.body,\n        headers: headers,\n        method: request.method,\n        mode: 'cors'\n      }).then(function (response) {\n        var headers = {};\n        response.headers.forEach(function (value, key) {\n          headers[key] = value;\n        });\n\n        if (response.status < 200 || response.status >= 300) {\n          return response.text().then(function (body) {\n            return handleRequestError(new Response(headers, response.status, body));\n          });\n        }\n\n        return new Promise(function (resolve, reject) {\n          new EventSourceEventStream(new EventSource(request.url), function (stream) {\n            return resolve(stream);\n          }, function (error) {\n            return reject(error);\n          }, retryRequest ? function () {\n            return retryRequest().then(function (es) {\n              return es;\n            });\n          } : undefined);\n        });\n      });\n    }\n\n    return fetch(request.url, {\n      body: request.body,\n      headers: headers,\n      method: request.method,\n      mode: 'cors'\n    }).then(function (response) {\n      var headers = {};\n      response.headers.forEach(function (value, key) {\n        headers[key] = value;\n      });\n\n      if (response.status < 200 || response.status >= 300) {\n        return response.text().then(function (body) {\n          return handleRequestError(new Response(headers, response.status, body));\n        });\n      }\n\n      return new ReaderEventStream(response.body, open, retryRequest ? function () {\n        return retryRequest().then(function (es) {\n          return es;\n        });\n      } : undefined);\n    });\n  };\n\n  return FetchStreamTransport;\n}();\n\nexport default FetchStreamTransport;","map":{"version":3,"sources":["../../../../../src/core/internal/net/FetchStreamTransport.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __assign = (this && this.__assign) || Object.assign || function(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n            t[p] = s[p];\n    }\n    return t;\n};\nimport { ContentTypes, Headers, Response, handleRequestError } from \"mongodb-stitch-core-sdk\";\nimport ReaderEventStream from \"./ReaderEventStream\";\nimport EventSourceEventStream from \"./EventSourceEventStream\";\nimport fetch from \"fetch-everywhere\";\nvar FetchStreamTransport = (function () {\n    function FetchStreamTransport() {\n    }\n    FetchStreamTransport.prototype.roundTrip = function (request) {\n        var responsePromise = fetch(request.url, {\n            body: request.body,\n            headers: request.headers,\n            method: request.method,\n            mode: 'cors'\n        });\n        var responseTextPromise = responsePromise.then(function (response) {\n            return response.text();\n        });\n        return Promise.all([responsePromise, responseTextPromise]).then(function (values) {\n            var response = values[0];\n            var body = values[1];\n            var headers = {};\n            response.headers.forEach(function (value, key) {\n                headers[key] = value;\n            });\n            return new Response(headers, response.status, body);\n        });\n    };\n    FetchStreamTransport.prototype.stream = function (request, open, retryRequest) {\n        if (open === void 0) { open = true; }\n        var rsSupported;\n        try {\n            new ReadableStream();\n            rsSupported = true;\n        }\n        catch (err) {\n            rsSupported = false;\n        }\n        var headers = __assign({}, request.headers);\n        headers[Headers.ACCEPT] = ContentTypes.TEXT_EVENT_STREAM;\n        headers[Headers.CONTENT_TYPE] = ContentTypes.TEXT_EVENT_STREAM;\n        if (!rsSupported) {\n            return fetch(request.url + \"&stitch_validate=true\", {\n                body: request.body,\n                headers: headers,\n                method: request.method,\n                mode: 'cors'\n            }).then(function (response) {\n                var headers = {};\n                response.headers.forEach(function (value, key) {\n                    headers[key] = value;\n                });\n                if (response.status < 200 || response.status >= 300) {\n                    return response.text()\n                        .then(function (body) { return handleRequestError(new Response(headers, response.status, body)); });\n                }\n                return new Promise(function (resolve, reject) {\n                    new EventSourceEventStream(new EventSource(request.url), function (stream) { return resolve(stream); }, function (error) { return reject(error); }, retryRequest ?\n                        function () { return retryRequest().then(function (es) { return es; }); }\n                        : undefined);\n                });\n            });\n        }\n        return fetch(request.url, {\n            body: request.body,\n            headers: headers,\n            method: request.method,\n            mode: 'cors'\n        }).then(function (response) {\n            var headers = {};\n            response.headers.forEach(function (value, key) {\n                headers[key] = value;\n            });\n            if (response.status < 200 || response.status >= 300) {\n                return response.text()\n                    .then(function (body) { return handleRequestError(new Response(headers, response.status, body)); });\n            }\n            return new ReaderEventStream(response.body, open, retryRequest ? function () {\n                return retryRequest().then(function (es) { return es; });\n            }\n                : undefined);\n        });\n    };\n    return FetchStreamTransport;\n}());\nexport default FetchStreamTransport;\n//# sourceMappingURL=FetchStreamTransport.js.map"]},"metadata":{},"sourceType":"module"}